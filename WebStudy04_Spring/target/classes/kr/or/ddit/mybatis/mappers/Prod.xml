<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="kr.or.ddit.prod.dao.ProdDAO">
	<sql id="searchFrag">
		<trim prefix="WHERE" prefixOverrides="AND">
			<if test="not detailCondition.empty">
				<if test="@org.apache.commons.lang3.StringUtils@isNotBlank(detailCondition.prodLgu)">
					AND PROD_LGU = #{detailCondition.prodLgu}
				</if>
				<if test="@org.apache.commons.lang3.StringUtils@isNotBlank(detailCondition.prodBuyer)">
					AND PROD_BUYER = #{detailCondition.prodBuyer}
				</if>
				<if test="@org.apache.commons.lang3.StringUtils@isNotBlank(detailCondition.prodName)">
					AND INSTR(PROD_NAME, #{detailCondition.prodName}) > 0
				</if>
			</if>
		</trim>	
	</sql>
	<select id="selectTotalRecord" resultType="int">
		SELECT COUNT(*)
		FROM PROD
		<include refid="searchFrag"/>
	</select>
	<select id="selectProdList" resultType="ProdVO" parameterType="kr.or.ddit.common.paging.PaginationInfo">
		SELECT B.*
		FROM(
			SELECT ROWNUM RNUM, A.*
			FROM(
				SELECT 
					prod_id, prod_name, prod_lgu, prod_buyer, prod_price, prod_mileage 
				FROM prod
				<include refid="searchFrag"/>
				ORDER BY PROD_LGU, PROD_ID DESC
			) A
		) B
		<![CDATA[
		WHERE RNUM >= #{startRow} AND RNUM <= #{endRow}
		]]>
	</select>
	
   <resultMap type="ProdVO" id="prodMap" autoMapping="true">
      <id property="prodId" column="PROD_ID"/>
      <!-- Map을 사용하지 않고 hashMap을 사용하는 이유는 Map이 인터페이스이기 때문에 객체가 생성되지 않는 이유 -->
       <association property="lprod" javaType="hashMap">
         <result property="lprodGu" column="LPROD_GU"/>
         <result property="lprodNm" column="LPROD_NM"/>
      </association>
       <association property="buyer" javaType="BuyerVO" autoMapping="true"><!-- 자동으로 result 엘리먼트 생성 -->
         <id property="buyerId" column="BUYER_ID"/>
      </association>
   </resultMap>
   
	<select id="selectProd" resultMap="prodMap" parameterType="string">
       SELECT 
          prod_id,prod_name,prod_lgu,prod_buyer,
           prod_cost,prod_price,prod_sale,prod_outline,
           prod_detail,prod_img,prod_totalstock,prod_insdate,
           prod_properstock,prod_size,prod_color,prod_delivery,
           prod_unit,prod_qtyin,prod_qtysale,prod_mileage,
           LPROD_GU, LPROD_NM, 
           BUYER_ID, BUYER_NAME, BUYER_ADD1, BUYER_COMTEL, BUYER_CHARGER
       FROM PROD INNER JOIN LPROD ON(PROD_LGU = LPROD_GU)
       INNER JOIN BUYER ON(PROD_BUYER = BUYER_ID) 
       WHERE PROD_ID = #{prodId}
   </select>
   
	<insert id="insertProd" parameterType="ProdVO">
		<selectKey order="BEFORE" resultType="String" keyProperty="prodId"><!-- KEY가 먼저 생성되도록 -->
			SELECT #{prodLgu} || LPAD(NVL(TO_NUMBER(SUBSTR(MAX(PROD_ID),5)), 0) + 1, 6, '0')
			FROM PROD
			WHERE PROD_LGU = #{prodLgu}
		</selectKey>
		INSERT INTO PROD(   
			 prod_id,prod_name,prod_lgu,prod_buyer,
          prod_cost,prod_price,prod_sale,prod_outline,
          prod_detail,prod_img,prod_totalstock,prod_insdate,
          prod_properstock,prod_size,prod_color,prod_delivery,
          prod_unit,prod_qtyin,prod_qtysale,prod_mileage
    	)
		VALUES
		(
          #{prodId,jdbcType=VARCHAR}
         , #{prodName,jdbcType=VARCHAR}
         , #{prodLgu,jdbcType=CHAR}
         , #{prodBuyer,jdbcType=CHAR}
         , #{prodCost,jdbcType=NUMERIC}
         , #{prodPrice,jdbcType=NUMERIC}
         , #{prodSale,jdbcType=NUMERIC}
         , #{prodOutline,jdbcType=VARCHAR}
         , #{prodDetail,jdbcType=CLOB}
         , #{prodImg,jdbcType=VARCHAR}
         , #{prodTotalstock,jdbcType=NUMERIC}
         , SYSDATE
         , #{prodProperstock,jdbcType=NUMERIC}
         , #{prodSize,jdbcType=VARCHAR}
         , #{prodColor,jdbcType=VARCHAR}
         , #{prodDelivery,jdbcType=VARCHAR}
         , #{prodUnit,jdbcType=VARCHAR}
         , #{prodQtyin,jdbcType=NUMERIC}
         , #{prodQtysale,jdbcType=NUMERIC}
         , #{prodMileage,jdbcType=NUMERIC}
		)
	</insert>
	
	<update id="updateProd" parameterType="ProdVO">
		UPDATE PROD SET
	    prod_name      = #{prodName, jdbcType=VARCHAR}       ,
	    prod_cost     = #{prodCost, jdbcType=NUMERIC}       ,
	    prod_price   = #{prodPrice, jdbcType=NUMERIC}      ,
	    prod_sale      = #{prodSale, jdbcType=NUMERIC}       ,
	    prod_outline    = #{prodOutline, jdbcType=VARCHAR}    ,
	    prod_detail   = #{prodDetail, jdbcType=CLOB}        ,
	    prod_totalstock = #{prodTotalstock, jdbcType=NUMERIC} ,
	    prod_insdate    = #{prodInsdate, jdbcType=DATE}       ,
	    prod_properstock= #{prodProperstock, jdbcType=NUMERIC},
	    prod_size    = #{prodSize, jdbcType=VARCHAR}       ,
	    prod_color   = #{prodColor, jdbcType=VARCHAR}      ,
	    prod_delivery   = #{prodDelivery, jdbcType=VARCHAR}   ,
	    prod_unit      = #{prodUnit, jdbcType=VARCHAR}       ,
	    prod_qtyin      = #{prodQtyin, jdbcType=NUMERIC}      ,
	    prod_qtysale    = #{prodQtysale, jdbcType=NUMERIC}    ,
	    prod_mileage     = #{prodMileage, jdbcType=NUMERIC}
	    <if test="@org.apache.commons.lang3.StringUtils@isNotBlank(prodImg)">
	    ,prod_img        = #{prodImg, jdbcType=VARCHAR}        
	    </if>
		WHERE PROD_ID = #{prodId}
	</update>
</mapper>